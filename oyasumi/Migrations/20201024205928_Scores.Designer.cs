// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using oyasumi.Database;

namespace oyasumi.Migrations
{
    [DbContext(typeof(OyasumiDbContext))]
    [Migration("20201024205928_Scores")]
    partial class Scores
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("oyasumi.Database.Models.DbBeatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("ApproachRate")
                        .HasColumnType("float");

                    b.Property<string>("Artist")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("BPM")
                        .HasColumnType("float");

                    b.Property<int>("BeatmapId")
                        .HasColumnType("int");

                    b.Property<string>("BeatmapMd5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("BeatmapSetId")
                        .HasColumnType("int");

                    b.Property<float>("CircleSize")
                        .HasColumnType("float");

                    b.Property<string>("Creator")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DifficultyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Frozen")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("HPDrainRate")
                        .HasColumnType("float");

                    b.Property<float>("OverallDifficulty")
                        .HasColumnType("float");

                    b.Property<int>("PassCount")
                        .HasColumnType("int");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<float>("Stars")
                        .HasColumnType("float");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Beatmaps");
                });

            modelBuilder.Entity("oyasumi.Database.Models.DbScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Accuracy")
                        .HasColumnType("float");

                    b.Property<bool>("AutoPiloting")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Count100")
                        .HasColumnType("int");

                    b.Property<int>("Count300")
                        .HasColumnType("int");

                    b.Property<int>("Count50")
                        .HasColumnType("int");

                    b.Property<int>("CountGeki")
                        .HasColumnType("int");

                    b.Property<int>("CountKatu")
                        .HasColumnType("int");

                    b.Property<int>("CountMiss")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileChecksum")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Flags")
                        .HasColumnType("int");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<int>("Mods")
                        .HasColumnType("int");

                    b.Property<int>("OsuVersion")
                        .HasColumnType("int");

                    b.Property<bool>("Passed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Perfect")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("PerformancePoints")
                        .HasColumnType("float");

                    b.Property<int>("PlayMode")
                        .HasColumnType("int");

                    b.Property<bool>("Relaxing")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReplayChecksum")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("oyasumi.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("JoinDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Privileges")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsernameAka")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsernameSafe")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("oyasumi.Database.Models.UserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("AccuracyCtb")
                        .HasColumnType("float");

                    b.Property<float>("AccuracyMania")
                        .HasColumnType("float");

                    b.Property<float>("AccuracyOsu")
                        .HasColumnType("float");

                    b.Property<float>("AccuracyTaiko")
                        .HasColumnType("float");

                    b.Property<int>("PerformanceCtb")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceMania")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceOsu")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceTaiko")
                        .HasColumnType("int");

                    b.Property<int>("PlaycountCtb")
                        .HasColumnType("int");

                    b.Property<int>("PlaycountMania")
                        .HasColumnType("int");

                    b.Property<int>("PlaycountOsu")
                        .HasColumnType("int");

                    b.Property<int>("PlaycountTaiko")
                        .HasColumnType("int");

                    b.Property<long>("RankedScoreCtb")
                        .HasColumnType("bigint");

                    b.Property<long>("RankedScoreMania")
                        .HasColumnType("bigint");

                    b.Property<long>("RankedScoreOsu")
                        .HasColumnType("bigint");

                    b.Property<long>("RankedScoreTaiko")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalScoreCtb")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalScoreMania")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalScoreOsu")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalScoreTaiko")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserStats");
                });
#pragma warning restore 612, 618
        }
    }
}
